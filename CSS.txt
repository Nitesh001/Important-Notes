Important CSS selectors:

1. child, descendant and attribute selector

li.myClass + li{    //matches only one li element that comes after 'myClass' 
  color:yellow
}

li.myClass ~ li{  /*matches all li that comes after .myClass*/
  color:green;
}

p[lang|="en"]{ /*selects all the tags where attribute 'lang' starts with 'en' */
  color: red;
}

p[lang~="more"]{ /*selects all the tags where attribute 'lang' has word 'more' in it with spaces */
  color:blue;
}

/*Similarly there are other tags. Like,
E[attr^=val] //attr value starts with 'val'
E[attr$=val] //attr value ends with 'val'
E[attr*=val] //String 'val' is a part of value of attribute
*/

2. Selector based on current state:
Three states are checked, disabled and enabled 

so, for checkbox

input[type='checkbox']:checked + label {
  color: purple;
}

But for input elements in HTML5, there are more states like, valid, invalid, required, optional, out-of-range, in-range

For eg, <input type="number" maximum=10 minimum=5 />

Any value not in this range will be invalid so,

input:invalid{
}

and 
input:out-of-range{
}

3. 'Style' tag can also be made contenteditable:
then in CSS:
[contenteditable] {
  -webkit-user-modify : read-write-plaintext-only;
}

4. Selectors based on position of elements w.r.t their parent in the DOM:
first-child,
last-child,
first-of-type,
last-of-type,
only-child,
only-of-type
nth-child,
nth-of-type,
nth-last-child,
nth-lst-of-type

like, 
div.myClass:nth-child(3n){  //Every third child
} 

div.myClass:nth-child(4){ //4th child from the top
}

div:nth-of-type(2){ //2nd div of any type of parent
}

div.myClass:nth-child(3n-1){
}

An awesome experiment:

li:first-of-type:last-of-type{ //It means, any li which is a first of its type and also last of its type means, there is only one li
  width:100%;
}

li:nth-of-type(1):nth-last-of-type(3){ //It means, any li which is a first of its type and also 3rd last from the bottom, it means there are 3 lis
  width:33.3%
}

A very good example of using nth-of-type is designing chess board.
like,
tr:nth-of-type(even) td:nth-of-type(even),
tr:nth-of-type(odd) td:nth-of-type(odd){
  background-color: black; //Here, background color should be black of all alternate elements
}
To generate star in CSS:
content : "\2605"

CSS Exclusion also available as:

div:not(.myExclude) //all divs except that have class myExclude

5. Other pseudo classes:

link, target

div:target > a{

}
It means, acnhor element inside such a div which was clicked just now.

:root: It is generally used with rem unit. May be the part of next version of CSS.


For links: 
hover, visited, active, focus, link

6) Pseudo elements:
Double colon indicates pseudo elements
::first-line
::first-letter
::selection = When you select any element (for copy or search), at that time what CSS element should have
::before
::after

check selectivizr library

7) CSS specificity:

Class selector, attribute selectors and pseudo selectors (.my, [type='checkbox'] and :last-child) both add same weight to the specificity.
In terms of specificity, id > class > element
Global selector(*) and combinators like >, +, ~ have no weight in specificity

8) Generated content in CSS:
content property in CSS

p:before{ //Places hello before the content of p tag
 content : "Hello"
}

p:after{ //Places bye after the content of p tag
 content : "Bye"
}

For eg, 
<p>
<!-- This is before place -->
My World
<!-- This is after place -->
</p>

If the element is empty then pseudo before and after can't work.
Only when there is some content in element, before and after work properly.

Type of values that can be used with content:

content : ""
content : "\2603" //unicode character, for characters use copypastecharacter.com
content : "(" attr(href) ")"
content : counter(name);
		  counter-increment : name;
		  
9) Media Queries:
<link rel="stylesheet" media="screen" href="style.css" />

How to include file as per external CSS syntax:
<link rel="stylesheer" media = 'screen and (max-width:600px)' href="css/smartphone.css" />

or

<style>
	@import "myCSS.css"
</style>

or

@import url(myCSS.css)

@media screen and (orientation: landscape){

}

Write CSS based on device and browser capabilities:

@media screen and (-webkit-min-device-pixel-ratio:2){
	//This is for iPhone
	.iphone4{
		/* high DPI */
	}
}

@media screen and (transform-3d){
	.transforms{
	
	}
}

@media screen and (min-width: 320px) and (max-width:500px){
	@ms-view-port {
		width:device-width
	}
}

Also works with {-prefix-animation} and {-prefix-transition}

@viewport{
	width:device-width;
	zoom:0.5
}

//This is same as we mention in meta tag BUT CURRENTLY SUPPORTED ONLY IN IE10+

mediaqueri.es

min-width
min-device-width
min-aspect-ratio
min-device-aspect-ratio

same with max

To check if animation is separated, write separate CSS as

@media screen and (-webkit-animation){ //only three values are allowed here -prefix-animation, -prefix-transition, -prefix transform-3d
	
}

@supports:















